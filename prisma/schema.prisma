generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.svg"
  theme    = "dark"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  phone         String?
  password      String
  Salesperson   Salesperson?
  salespersonId String?
  Client        Client?
  clientId      String?

  @@map("users")
}

model Salesperson {
  id      String @id @default(uuid())
  User    User   @relation(fields: [userId], references: [id])
  balance Float? @default(0)
  Sales   Sale[]
  Books   Book[]
  userId  String @unique

  @@map("salespersons")
}

model Client {
  id       String    @id @default(uuid())
  User     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
  Payments Payment[]
  Cart     Cart?

  @@map("clients")
}

model Book {
  id            String       @id @default(uuid())
  title         String
  author        String
  character     String
  publishDate   DateTime?
  category      BookCategory
  description   String
  BookCarts     BookCart[]
  price         Float
  storage       Int          @default(0)
  Salesperson   Salesperson? @relation(fields: [salespersonId], references: [id])
  salespersonId String?

  @@map("books")
}

model Sale {
  id            String      @id @default(uuid())
  Cart          Cart        @relation(fields: [cartId], references: [id])
  cartId        String
  Payment       Payment     @relation(fields: [paymentId], references: [id])
  paymentId     String
  Salesperson   Salesperson @relation(fields: [salespersonId], references: [id])
  salespersonId String

  @@map("sales")
}

model Cart {
  id         String     @id @default(uuid())
  BooksCart  BookCart[]
  totalPrice Float      @default(0)
  Sales      Sale[]
  Client     Client     @relation(fields: [clientId], references: [id])
  clientId   String     @unique

  @@map("carts")
}

model BookCart {
  id         String @id @default(uuid())
  bookId     String
  quantity   Int
  totalPrice Float
  Book       Book   @relation(fields: [bookId], references: [id])
  Cart       Cart   @relation(fields: [cartId], references: [id])
  cartId     String

  @@map("book_carts")
}

model Payment {
  id       String      @id @default(uuid())
  type     PaymentType @default(CASH)
  Client   Client      @relation(fields: [clientId], references: [id])
  Sales    Sale[]
  clientId String

  @@map("payments")
}

enum PaymentType {
  CASH
  CREDITCARD
  DEBITCARD
}

enum BookCategory {
  HORROR
  ROMANCE
  SCIENCEFICTION
  REMAKE
  CRIME
  INFANTIL
  FILOSOFIC
  HISTORIC
  ACTION
  OTHER
}
